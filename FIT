//firstfit

import java.util.ArrayList; 
import java.util.List; 
import java.util.Scanner; 
 
class MemoryBlock { 
    int size; 
    boolean isAllocated; 
    String processName;  // To store the name of the allocated process 
 
    MemoryBlock(int size) { 
        this.size = size; 
        this.isAllocated = false; 
        this.processName = ""; // Initialize with empty string 
    } 
} 
 
class MemoryManager { 
    private List<MemoryBlock> memoryBlocks; 
 
    public MemoryManager(List<MemoryBlock> memoryBlocks) { 
        this.memoryBlocks = memoryBlocks; 
    } 
 
    public void firstFit(String processName, int requestSize) { 
        // Find the first fit block 
        for (MemoryBlock block : memoryBlocks) { 
            if (!block.isAllocated && block.size >= requestSize) { 
                block.isAllocated = true; 
                block.processName = processName; // Assign process name to the block 
                System.out.printf("| %-10s | %-10d | %-10s |\n", processName, requestSize, "Allocated"); 
                return; // Exit after allocation 
            } 
        } 
        // If no suitable block found 
        System.out.printf("| %-10s | %-10d | %-10s |\n", processName, requestSize, "Not Allocated"); 
    } 
 
    public void displayMemoryStatus() { 
        System.out.println("\nMemory Blocks Status:"); 
        System.out.printf("| %-10s | %-12s |\n", "Block Size", "Process"); 
        System.out.println("|------------|--------------|"); 
        for (MemoryBlock block : memoryBlocks) { 
            System.out.printf("| %-10d | %-12s |\n", block.size, block.isAllocated ? block.processName : 
"Free"); 
        } 
    } 
} 
 
public class Firstfit { 
    public static void main(String[] args) { 
        List<MemoryBlock> memoryBlocks = new ArrayList<>(); 
        Scanner scanner = new Scanner(System.in); 
 
        // Input memory block sizes 
        System.out.print("Enter the number of memory blocks: "); 
        int numBlocks = scanner.nextInt(); 
        for (int i = 0; i < numBlocks; i++) { 
            System.out.print("Enter size of memory block " + (i + 1) + ": "); 
            int size = scanner.nextInt(); 
            memoryBlocks.add(new MemoryBlock(size)); 
        } 
 
        MemoryManager memoryManager = new MemoryManager(memoryBlocks); 
 
        while (true) { 
            System.out.print("\nEnter process name (e.g., p1) or 'exit' to quit: "); 
            String processName = scanner.next(); 
            if (processName.equalsIgnoreCase("exit")) break; 
 
            System.out.print("Enter the size of memory request: "); 
            int requestSize = scanner.nextInt(); 
 
            memoryManager.firstFit(processName, requestSize); 
            memoryManager.displayMemoryStatus(); 
        } 
 
        scanner.close(); 
    } 
} 
 
OUTPUT: 
Enter the number of memory blocks: 5 
Enter size of memory block 1: 600 
Enter size of memory block 2: 400 
Enter size of memory block 3: 250 
Enter size of memory block 4: 300 
Enter size of memory block 5: 100 
 
Enter process name (e.g., p1) or 'exit' to quit: p1 
Enter the size of memory request: 500 
| p1         | 500        | Allocated  | 
 
Memory Blocks Status: 
| Block Size | Process      
| 
|------------|--------------| 
| 600        
| 400        
| 250        
| 300        
| 100        
| p1           
| Free        
| Free        
| Free        
| Free        
| 
 | 
 | 
 | 
 | 
Enter process name (e.g., p1) or 'exit' to quit: p2 
Enter the size of memory request: 350 
| p2         
| 350        
| Allocated  | 
Memory Blocks Status: 
| Block Size | Process      
|------------|--------------| 
| 600        
| 400        
| 250        
| 300        
| 100        
| p1           
| p2           
| Free        
| Free        
| Free        
| 
| 
 | 
 | 
 | 
| 



//Best fit
import java.util.ArrayList; 
import java.util.List; 
import java.util.Scanner; 
 
class MemoryBlock { 
    int size; 
    boolean isAllocated; 
    String processName;  // To store the name of the allocated process 
 
    MemoryBlock(int size) { 
        this.size = size; 
        this.isAllocated = false; 
        this.processName = ""; // Initialize with empty string 
    } 
} 
 
class MemoryManager { 
    private List<MemoryBlock> memoryBlocks; 
 
    public MemoryManager(List<MemoryBlock> memoryBlocks) { 
        this.memoryBlocks = memoryBlocks; 
    } 
 
    public void bestFit(String processName, int requestSize) { 
        MemoryBlock bestBlock = null; 
 
        // Find the best fit block 
        for (MemoryBlock block : memoryBlocks) { 
            if (!block.isAllocated && block.size >= requestSize) { 
                if (bestBlock == null || block.size < bestBlock.size) { 
                    bestBlock = block; 
                } 
            } 
        } 
 
        // Allocate the best block found 
        if (bestBlock != null) { 
            bestBlock.isAllocated = true; 
            bestBlock.processName = processName; // Assign process name to the block 
            System.out.printf("| %-10s | %-10d | %-10s |\n", processName, requestSize, "Allocated"); 
        } else { 
            System.out.printf("| %-10s | %-10d | %-10s |\n", processName, requestSize, "Not Allocated"); 
        } 
    } 
 
    public void displayMemoryStatus() { 
        System.out.println("\nMemory Blocks Status:"); 
        System.out.printf("| %-10s | %-12s |\n", "Block Size", "Process"); 
        System.out.println("|------------|--------------|"); 
        for (MemoryBlock block : memoryBlocks) { 
            System.out.printf("| %-10d | %-12s |\n", block.size, block.isAllocated ? block.processName : 
"Free"); 
        } 
    } 
} 
 
public class Bestfit{ 
    public static void main(String[] args) { 
        List<MemoryBlock> memoryBlocks = new ArrayList<>(); 
        Scanner scanner = new Scanner(System.in); 
 
        // Input memory block sizes 
        System.out.print("Enter the number of memory blocks: "); 
        int numBlocks = scanner.nextInt(); 
        for (int i = 0; i < numBlocks; i++) { 
            System.out.print("Enter size of memory block " + (i + 1) + ": "); 
            int size = scanner.nextInt(); 
            memoryBlocks.add(new MemoryBlock(size)); 
        } 
 
        MemoryManager memoryManager = new MemoryManager(memoryBlocks); 
 
        while (true) { 
            System.out.print("\nEnter process name (e.g., p1) or 'exit' to quit: "); 
            String processName = scanner.next(); 
            if (processName.equalsIgnoreCase("exit")) break; 
 
            System.out.print("Enter the size of memory request: "); 
            int requestSize = scanner.nextInt(); 
 
            memoryManager.bestFit(processName, requestSize); 
            memoryManager.displayMemoryStatus(); 
        } 
 
        scanner.close(); 
    } 
} 
 
OUTPUT: 
Enter the number of memory blocks: 4 
Enter size of memory block 1: 250 
Enter size of memory block 2: 980 
Enter size of memory block 3: 700 
Enter size of memory block 4: 600 
Enter process name (e.g., p1) or 'exit' to quit: p1 
Enter the size of memory request: 350 
| p1         
| 350        
| Allocated  | 
Memory Blocks Status: 
| Block Size | Process      
|------------|--------------| 
| 250        
| 980        
| 700        
| 600        
| Free        
| Free        
| Free        
| p1           
 | 
 | 
 | 
| 
| 
Enter process name (e.g., p1) or 'exit' to quit: p2 
Enter the size of memory request: 800 
| p2         
| 800        
| Allocated  | 
Memory Blocks Status: 
| Block Size | Process      
|------------|--------------| 
| 250        
| 980        
| 700        
| 600        
| Free        
| p2           
| Free        
| p1           
 | 
| 
 | 
| 
| 
Enter process name (e.g., p1) or 'exit' to quit: exit 



//next fit
import java.util.ArrayList; 
import java.util.List; 
import java.util.Scanner; 
 
class MemoryBlock { 
    int size; 
    boolean isAllocated; 
    String processName;  // To store the name of the allocated process 
 
    MemoryBlock(int size) { 
        this.size = size; 
        this.isAllocated = false; 
        this.processName = ""; // Initialize with empty string 
    } 
} 
 
class MemoryManager { 
    private List<MemoryBlock> memoryBlocks; 
    private int lastAllocatedIndex; // Track the last allocated index 
 
    public MemoryManager(List<MemoryBlock> memoryBlocks) { 
        this.memoryBlocks = memoryBlocks; 
        this.lastAllocatedIndex = 0; // Initialize to the start 
    } 
 
    public void nextFit(String processName, int requestSize) { 
        // Start searching from the last allocated index 
        for (int i = lastAllocatedIndex; i < memoryBlocks.size(); i++) { 
            MemoryBlock block = memoryBlocks.get(i); 
            if (!block.isAllocated && block.size >= requestSize) { 
                block.isAllocated = true; 
                block.processName = processName; // Assign process name to the block 
                lastAllocatedIndex = (i + 1) % memoryBlocks.size(); // Update the last allocated index 
                System.out.printf("| %-10s | %-10d | %-10s |\n", processName, requestSize, "Allocated"); 
                return; // Exit after allocation 
            } 
        } 
 
        // If no suitable block found, wrap around and check from the beginning 
        for (int i = 0; i < lastAllocatedIndex; i++) { 
            MemoryBlock block = memoryBlocks.get(i); 
            if (!block.isAllocated && block.size >= requestSize) { 
                block.isAllocated = true; 
                block.processName = processName; // Assign process name to the block 
                lastAllocatedIndex = (i + 1) % memoryBlocks.size(); // Update the last allocated index 
                System.out.printf("| %-10s | %-10d | %-10s |\n", processName, requestSize, "Allocated"); 
                return; // Exit after allocation 
            } 
        } 
 
        // If still no suitable block found 
        System.out.printf("| %-10s | %-10d | %-10s |\n", processName, requestSize, "Not Allocated"); 
    } 
 
    public void displayMemoryStatus() { 
        System.out.println("\nMemory Blocks Status:"); 
        System.out.printf("| %-10s | %-12s |\n", "Block Size", "Process"); 
        System.out.println("|------------|--------------|"); 
        for (MemoryBlock block : memoryBlocks) { 
            System.out.printf("| %-10d | %-12s |\n", block.size, block.isAllocated ? block.processName : 
"Free"); 
        } 
    } 
} 
 
public class Nextfit { 
    public static void main(String[] args) { 
        List<MemoryBlock> memoryBlocks = new ArrayList<>(); 
        Scanner scanner = new Scanner(System.in); 
 
        // Input memory block sizes 
        System.out.print("Enter the number of memory blocks: "); 
        int numBlocks = scanner.nextInt(); 
        for (int i = 0; i < numBlocks; i++) { 
            System.out.print("Enter size of memory block " + (i + 1) + ": "); 
            int size = scanner.nextInt(); 
            memoryBlocks.add(new MemoryBlock(size)); 
        } 
 
        MemoryManager memoryManager = new MemoryManager(memoryBlocks); 
 
        while (true) { 
            System.out.print("\nEnter process name (e.g., p1) or 'exit' to quit: "); 
            String processName = scanner.next(); 
            if (processName.equalsIgnoreCase("exit")) break; 
 
            System.out.print("Enter the size of memory request: "); 
            int requestSize = scanner.nextInt(); 
 
            memoryManager.nextFit(processName, requestSize); 
            memoryManager.displayMemoryStatus(); 
        } 
 
scanner.close(); 
} 
} 
OUTPUT: 
Enter the number of memory blocks: 6 
Enter size of memory block 1: 290 
Enter size of memory block 2: 190 
Enter size of memory block 3: 540 
Enter size of memory block 4: 345 
Enter size of memory block 5: 700 
Enter size of memory block 6: 500 
Enter process name (e.g., p1) or 'exit' to quit: p2 
Enter the size of memory request: 900 
| p2         
| 900        
| Not Allocated | 
Memory Blocks Status: 
| Block Size | Process      
|------------|--------------| 
| 290        
| 190        
| 540        
| 345        
| 700        
| 500        
| Free        
| Free        
| Free        
| Free        
| Free        
| Free        
 | 
 | 
 | 
 | 
| 
 | 
 | 
Enter process name (e.g., p1) or 'exit' to quit: p2  
Enter the size of memory request: 320 
| p2         
| 320        
| Allocated  | 
Memory Blocks Status: 
| Block Size | Process      
|------------|--------------| 
| 290        
| 190        
| 540        
| 345        
| 700        
| 500        
| Free        
| Free        
| p2           
| Free        
| Free        
| Free        
 | 
 | 
| 
 | 
 | 
 | 
| 
